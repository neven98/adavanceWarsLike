package com.mygdx.game;

public class Tile {
    public static Integer[][] map;
    public static Integer[][] tile(int b, int v,int depla){
        map = new Integer[30][16];
        for (int i = 0; i < map.length; i++) {
            for (int j = 0; j < map[i].length; j++) {
                if (i == 0 || i == 29 || j == 0 || j == 15) {
                    map[i][j] = 0;
                }
                else if (i == 1 || i == 28 || j == 1 || j == 14) {
                    map[i][j] = 1;
                }
                else if((BlueSoldier.Moved || RedSoldier.Moved) && (((i+depla > b/64) & (i-depla < b/64)) & (j+depla > v/64) & (j-depla < v/64) & ((i != b/64) || (j != v/64))) && (!(((i == (b / 64) + 3)) & (j != (v / 64)))) & (!(((i == (b / 64) - 3)) & (j != (v / 64)))) &    (!(((i == (b / 64) + 2)) & (j != (v / 64)) & (j != (v / 64) - 1) & (j != (v / 64) + 1) )) &  (!(((i == (b / 64) - 2)) & (j != (v / 64)) & (j != (v / 64) - 1) & (j != (v / 64) + 1)))  && (!(((i == (b / 64) - 1)) & (j != (v / 64)) && (j != (v / 64)+1) && (j != (v / 64)-1) && (j != (v / 64)-2) && (j != (v / 64)+2))) && (!(((i == (b / 64) + 1)) & (j != (v / 64)) && (j != (v / 64)-1) && (j != (v / 64)+1) && (j != (v / 64)-2) && (j != (v / 64)+2)  ))     ){
                    map[i][j] = 3;
                }
                else if((BlueCar.Moved || RedCar.Moved) & (((i+depla > b/64) & (i-depla < b/64)) & (j+depla > v/64) & (j-depla < v/64) & ((i != b/64) || (j != v/64)) &  (!(((i == (b / 64) - 4)) & (j != (v / 64)))) & (!(((i == (b / 64) + 4)) & (j != (v / 64))))  &          (!(((i == (b / 64) + 3)) & (j != (v / 64)) & (j != (v / 64) - 1) & (j != (v / 64) + 1))) & (!(((i == (b / 64) - 3)) & (j != (v / 64)) & (j != (v / 64) - 1) & (j != (v / 64) + 1))) & (!(((i == (b / 64) + 2)) & (j != (v / 64)) & (j != (v / 64) - 1) & (j != (v / 64) + 1) & (j != (v / 64) + 2) & (j != (v / 64) - 2))) & (!(((i == (b / 64) - 2)) & (j != (v / 64)) & (j != (v / 64) - 1) & (j != (v / 64) + 1) & (j != (v / 64) + 2) & (j != (v / 64) - 2))) & (!(((i == (b / 64) - 1)) & (j != (v / 64)) & (j != (v / 64) - 1) & (j != (v / 64) + 1) & (j != (v / 64) + 2) & (j != (v / 64) - 2) & (j != (v / 64) + 3) & (j != (v / 64) - 3))) & (!(((i == (b / 64) + 1)) & (j != (v / 64)) & (j != (v / 64) - 1) & (j != (v / 64) + 1) & (j != (v / 64) + 2) & (j != (v / 64) - 2) & (j != (v / 64) + 3) & (j != (v / 64) - 3))))){
                    map[i][j] = 3;
                }
                else if ((BlueTank.Moved || RedTank.Moved) && ((((i + depla) > (b / 64)) & ((i - depla) < (b / 64))) & ((j + depla) > (v / 64)) & ((j - depla) < (v / 64)) & ((i != (b / 64)) || (j != (v / 64)))) && (!(((i == (b / 64) - 2)) & (j != (v / 64)))) && (!(((i == (b / 64) + 2)) & (j != (v / 64)))) && (!(((i == (b / 64) - 1)) & (j != (v / 64)) & (j != (v / 64) + 1) & (j != (v / 64) - 1))) &&   (!(((i == (b / 64) + 1)) && (j != (v / 64)) & (j != (v / 64) + 1) & (j != (v / 64) - 1)))   ){
                    map[i][j] = 3;
                }
                else {
                    map[i][j] = 2;
                }
            }
        }
        return map;
    }
}
